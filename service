#!/usr/bin/env python

from hosted import device, node, config
import time

config.restart_on_update()  # Restart service on config changes (e.g., pin edits in dashboard)

# Your GPIO pins
PINS = {
    'power': 18,
    'up': 23,
    'down': 22,
    'menu': 4,
    'select': 24
}

# Monitor pins with pull-up
for name, pin in PINS.items():
    device.gpio.monitor(pin, pull_up=True)

# Track last state and time for edge detection and debouncing
last_state = {pin: True for pin in PINS.values()}  # Assume initial high
last_event_time = {pin: 0 for pin in PINS.values()}
debounce_delay = 0.2  # 200ms

print("Service started - monitoring GPIO pins")  # Debug log

for pin, state in device.gpio.poll_forever():
    name = next((n for n, p in PINS.items() if p == pin), None)
    now = time.time()
    if name and not state and last_state[pin] and now - last_event_time[pin] > debounce_delay:
        # Falling edge (press, active-low)
        print("Press detected on %s (pin %d)" % (name, pin))  # Debug
        node.send("%s:0" % name)  # Send to node.lua (e.g., "up:0")
        last_event_time[pin] = now
    last_state[pin] = state
